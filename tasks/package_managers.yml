---
# Check if npm is available (either from system or fnm)
- name: Check if npm is available
  shell: |
    if command -v npm &> /dev/null; then
      echo "system"
    elif command -v fnm &> /dev/null; then
      eval "$(fnm env)" && command -v npm &> /dev/null && echo "fnm"
    else
      echo "none"
    fi
  register: npm_available
  changed_when: false

- name: Debug npm availability
  debug:
    msg: "NPM availability: {{ npm_available.stdout }}, npm_packages defined: {{ npm_packages is defined }}, npm_packages: {{ npm_packages | default('not defined') }}"

- name: Install global NPM packages (system npm)
  npm:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    global: true
    executable: "{{ item.executable | default(omit) }}"
  loop: "{{ npm_packages | default([]) }}"
  when:
    - "'system' in npm_available.stdout"
    - npm_packages is defined
    - npm_packages | length > 0

- name: Install global NPM packages (fnm)
  shell: |
    eval "$(fnm env)"
    npm install -g {{ item.name | default(item) | quote }}
  loop: "{{ npm_packages | default([]) }}"
  when:
    - "'fnm' in npm_available.stdout"
    - npm_packages is defined
    - npm_packages | length > 0
  register: npm_install_result
  changed_when: "'added' in npm_install_result.stdout or 'updated' in npm_install_result.stdout"

- name: Install global Pip packages.
  pip:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
    version: "{{ item.version | default(omit) }}"
    executable: "{{ item.executable | default('pip3') }}"
  loop: "{{ pip_packages }}"
